---
    import BaseLayout from '../layouts/BaseLayout.astro';
    import BlocTexte from '../components/BlocTexte.astro';

    const pageTitle = "Textes"
    const textes = await Astro.glob('../pages/textes/*.md');
---

<BaseLayout pageTitle={ pageTitle }>
    <h1 class="text-center font-headings font-bold text-4xl lg:text-5xl my-8">{ pageTitle }</h1>

    <div class="bloc-textes-grid sm:grid sm:grid-cols-2 sm:gap-2 lg:hidden">
        <!-- {textes.map((texte) => <BlocTexte texte={ texte } />)} -->
        <div class="zine-col-0">
            {textes.reverse().map((texte) => Number.parseInt(texte.url.substr(-1, 1)) % 2 == 0 && <BlocTexte texte={ texte } mediaSize="sm" />)}
        </div>
        <div class="zine-col-1">
            {textes.reverse().map((texte) => Number.parseInt(texte.url.substr(-1, 1)) % 2 != 0 && <BlocTexte texte={ texte } mediaSize="sm" />)}
        </div>
    </div>
    <div class="bloc-textes relative">
        {textes.map((texte) => <BlocTexte texte={ texte } mediaSize="lg" />)}
    </div>

    <script is:inline
			  src="https://code.jquery.com/jquery-3.7.1.slim.min.js"
			  integrity="sha256-kmHvs0B+OpCW5GVHUNjv9rOmY0IvSIRcf7zGUDTDQM8="
			  crossorigin="anonymous">
    </script>
    <script>
        function roundHalf(num:number):number { return (Math.round(num*2)/2); }

        function isBlocPlaceable(width:number, height:number, index:number, maxWidthTiles:number, unavailableTiles:Array<number>) {
            let isPossible = true;
            let xSize = 0;
            while (xSize <= width && isPossible) {
                let ySize = 0;
                while (ySize < height && isPossible) {
                    isPossible = !unavailableTiles.includes(index + xSize + ySize * maxWidthTiles);
                    ySize++;
                }
                xSize++
            }
            return isPossible;
        }

        function placeBlocInMap(width:number, height:number, index:number, maxWidthTiles:number, unavailableTiles:Array<number>) {
            let xSize = 0;
            while (xSize <= width) {
                let ySize = 0;
                while (ySize < height) {
                    unavailableTiles.push(index + xSize + ySize * maxWidthTiles);
                    ySize++;
                }
                xSize++
            }
            return unavailableTiles;
        }

        function placeBlocsInDOM(dataBlocsTexte:Array<{width:number,horizontalOffset:number,verticalOffset:number}>, breakpoints:{min:number,max:number}, maxWidthTiles:number) {
            /*
            ** Pour la hauteur, on laisse faire automatiquement avec la taille du texte
            ** On regarde selon la hauteur donnée le nombre de cases prises par le texte
            */

            // Pas oublier les marges de 16px de côté
            const squareSize = $( window ).width() > breakpoints.max ? roundHalf(breakpoints.max / maxWidthTiles) : roundHalf(($( window ).width() - 32) / maxWidthTiles);    
            let unavailableTiles = [];
            
            $( ".bloc-texte-lg" ).each((index, item) => {
                // On récupère le texte comme un objet jQuery
                let texte = $(item);
                
                // On redimensionne le texte selon le nombre de cases de largeur qui a été calculé
                texte.css({
                    'width': roundHalf(dataBlocsTexte[index].width * squareSize) + 'px',
                })

                // On calcule sa hauteur en terme de cases
                const texteHeight = Math.round(texte.height() / squareSize) + 2;

                let isPossible = false;
                let yPos = 0;
                let xPos = 0;

                // Tester sur chaque case si le texte peut être placée sans être sur une autre
                while (!isPossible) {
                    xPos = 0;
                    while (xPos < maxWidthTiles - dataBlocsTexte[index].width && !isPossible) {
                        isPossible = isBlocPlaceable(dataBlocsTexte[index].width + dataBlocsTexte[index].horizontalOffset, texteHeight, (xPos + yPos * maxWidthTiles), maxWidthTiles, unavailableTiles);
                        xPos++;
                    }
                    yPos++;
                }
                        
                // On ajoute l'offset
                xPos += dataBlocsTexte[index].horizontalOffset;
                yPos += dataBlocsTexte[index].verticalOffset;

                // On colle les textes à droite s'ils arrivent à moins de 4 cases du bord droit
                xPos = maxWidthTiles - xPos - dataBlocsTexte[index].width < 4 ? maxWidthTiles - dataBlocsTexte[index].width + 1 : xPos;
                
                // Ajout des cases du texte en cours dans la liste des cases déjà prises
                unavailableTiles = placeBlocInMap(dataBlocsTexte[index].width, texteHeight, (xPos - 1 + ((yPos - 1) * maxWidthTiles)), maxWidthTiles, unavailableTiles);
                
                if (window.innerWidth >= breakpoints.min) {
                    // On place le texte
                    texte.css({
                        'top': ((yPos - 1) * squareSize) + ((yPos - 1) * 1/2) + 'px',
                        'left': (xPos - 1) * squareSize + 'px'
                    });
                }
            });

            return Math.round(((Math.max(...unavailableTiles) / maxWidthTiles) * squareSize) + (Math.max(...unavailableTiles) / maxWidthTiles));
        }

        $(function() {
            /*
            ** Calcul des largeurs des textes ainsi que de leur offset aléatoire
            ** Déclaration des variables globales pour la grille
            ** Grille de 24 de large, taille des carrés calculés en fonction de la largeur de la fenêtre ou de la largeur max du contenu
            ** Textes pouvant avoir des tailles de 4 cases à 10 cases de large
            */
            const breakpoints = { min: 1024, max: 1260 };
            const maxWidthTiles = 24;
            const squareSize = $( window ).width() > breakpoints.max ? roundHalf(breakpoints.max / maxWidthTiles) : roundHalf(($( window ).width() - 32) / maxWidthTiles);
            const possibleSizes = { min: 6, max: 12 };
            const textesSizes = { min: 2, max: 12 };

            // On garde en mémoire les tailles et positions pour gérer le redimensionnement de la fenêtre
            let dataBlocsTexte = [];

            $( ".bloc-texte-lg" ).each((index, item) => {
                /*
                ** REDIMENSIONNEMENT DES TEXTES
                */

                // On récupère le texte comme un objet jQuery
                let texte = $(item);

                // On récupère d'abord la taille du texte en largeur pour avoir une échelle de base
                let texteWidth = Math.round(texte.width() / squareSize) + 1

                // S'il est trop large on définit une largeur en fonction de la taille du texte
                if (texteWidth > possibleSizes.max) {
                    texteWidth = Math.floor(texte.text().length / 100)
                    texteWidth = texteWidth < textesSizes.min ? textesSizes.min : texteWidth;
                    texteWidth = texteWidth > textesSizes.max ? textesSizes.max : texteWidth;
                    // Pour les petits textes, on les élargit pour avoir un ratio plus large que long
                    texteWidth = texteWidth < 3 ? texteWidth + 3 : texteWidth;
                    // On scale la largeur entre les tailles possibles des textes et les tailles prédéfinies choisies
                    texteWidth = Math.round((possibleSizes.max - possibleSizes.min) * (texteWidth - textesSizes.min) / (textesSizes.max - textesSizes.min) + possibleSizes.min)
                }

                // On met la taille dans une constante
                const finalWidth = texteWidth;
                
                // 20% de chances que le texte soit décalée vers la droite
                const horizontalOffset = Math.random() < 0.2 ? 1 : 0;
                // 25% de chances que le texte soit décalée vers le bas
                const verticalOffset = Math.random() < 0.25 ? 1 : 0;
                
                // On remplit le tableau des tailles et positions des différents textes
                dataBlocsTexte.push({ width: finalWidth, horizontalOffset: horizontalOffset, verticalOffset: verticalOffset });
            })

            $( ".bloc-textes" ).addClass('hidden lg:block');

            // On place les textes dans la page en récupérant la nouvelle hauteur du canvas
            const canvasHeight = placeBlocsInDOM(dataBlocsTexte, breakpoints, maxWidthTiles);
            
            $( window ).on( 'resize', function() {
                // On replace les textes dans la page en récupérant la nouvelle hauteur du canvas
                const canvasHeight = placeBlocsInDOM(dataBlocsTexte, breakpoints, maxWidthTiles);

                /*
                ** Déplacement du footer en bas de page
                */

                if (window.innerWidth >= breakpoints.min) {
                    $( ".bloc-textes" ).css({
                        'height': canvasHeight + 'px'
                    })
                } else {
                    $( ".bloc-textes" ).css({
                        'height': 'auto'
                    })
                }
            })

            /*
            ** Déplacement du footer en bas de page
            */

            if (window.innerWidth >= breakpoints.min) {
                $( ".bloc-textes" ).css({
                    'height': canvasHeight + 'px'
                })
            } else {
                $( ".bloc-textes" ).css({
                    'height': 'auto'
                })
            }
        })
    </script>
</BaseLayout>