---
    import BaseLayout from '../layouts/BaseLayout.astro';
    import BlocTexte from '../components/BlocTexte.astro';

    const pageTitle = "Textes"
    const textes = await Astro.glob('../pages/textes/*.md');
---

<BaseLayout pageTitle={ pageTitle }>
    <h1 class="text-center font-headings font-bold text-5xl my-8">{ pageTitle }</h1>

    <div class="bloc-textes relative">
        {textes.map((texte) => <BlocTexte texte={ texte } />)}
    </div>

    <script is:inline
			  src="https://code.jquery.com/jquery-3.7.1.slim.min.js"
			  integrity="sha256-kmHvs0B+OpCW5GVHUNjv9rOmY0IvSIRcf7zGUDTDQM8="
			  crossorigin="anonymous">
    </script>
    <script>
        $(function() {
            /*
            ** Préparation de la grille pour le placement des textes
            ** Grille de 24 de large, avec des carrés de 52.5 pour une largeur totale de 1280px
            ** Textes pouvant avoir des tailles de 4 cases à 10 cases de large
            ** On les redimensionne aléatoirement en largeur
            ** Pour la hauteur, on laisse faire automatiquement avec la taille du texte
            ** On regarde selon la hauteur donnée le nombre de cases prises par le texte
            */

            const maxWidthSquare = 24;
            const squareSize = $('.container-main-content').width() / maxWidthSquare;
            const possibleSizes = { min: 4, max: 14 };
            const textesSizes = { min: 1, max: 12 };

            // On garde en mémoire les cases occupées dans un tableau (Pas de coordonnées, juste le numéro de case)
            let unavailableTiles: number[] = [];

            $( ".bloc-texte" ).each((index, item) => {
                /*
                ** REDIMENSIONNEMENT DES TEXTES
                */

                // On récupère le texte comme un objet jQuery
                let texte = $(item);

                // On définit une largeur en fonction de la taille du texte
                // On récupère d'abord la taille du texte en (nombre de mots / 100) Pour avoir une échelle de base
                let texteWidth = Math.floor(texte.text().length / 100)
                texteWidth = texteWidth < textesSizes.min ? textesSizes.min : texteWidth;
                texteWidth = texteWidth > textesSizes.max ? textesSizes.max : texteWidth;

                // Puis on le scale en fonction de la range choisie des largeurs choisies
                const finalWidth = Math.round((possibleSizes.max - possibleSizes.min) * (texteWidth - textesSizes.min) / (textesSizes.max - textesSizes.min) + possibleSizes.min)
                console.log(finalWidth);

                // On redimensionne le texte à sa taille finale
                texte.css({
                    'width': finalWidth * squareSize + 'px'
                })

                // On calcule sa hauteur en terme de cases
                const finalHeight = Math.round(texte.height() / squareSize) + 2;

                /*
                ** POSITIONNEMENT DES TEXTES
                */

                let currentCoor: number[] = [];
                let isPossible = false;
                let yPos = 0;
                let xPos = 0;

                // Tester sur chaque case si le texte peut être placée sans être sur une autre
                while (!isPossible) {
                    xPos = 0;
                    while (xPos < maxWidthSquare - finalWidth && !isPossible) {
                        currentCoor = [];
                        isPossible = true;
                        let xSize = 0;
                        while (xSize <= finalWidth && isPossible) {
                            let ySize = 0;
                            while (ySize < finalHeight && isPossible) {
                                currentCoor.push((xPos + xSize + 1) + maxWidthSquare * (yPos + ySize));
                                isPossible = !unavailableTiles.includes((xPos + xSize + 1) + maxWidthSquare * (yPos + ySize));
                                ySize++;
                            }
                            xSize++
                        }
                        // 10% de chances que le texte soit décalée vers la droite
                        isPossible = Math.random() < 0.1 ? false : isPossible;
                        xPos++;
                    }
                    // 25% de chances que le texte soit décalée vers le bas
                    isPossible = Math.random() < 0.5 ? false : isPossible;
                    yPos++;
                }

                // Ajout des cases du texte en cours dans la liste des cases déjà prises
                unavailableTiles = unavailableTiles.concat(Array.from(currentCoor, (tile) => tile));

                // Si le texte est proche du bord droit, on le décale jusqu'au bord droit (Pour utiliser toute la largeur)
                xPos = maxWidthSquare - xPos - finalWidth < 4 ? maxWidthSquare - finalWidth + 1 : xPos;

                texte.css({
                    'top': (yPos - 1) * squareSize + 'px',
                    'left': (xPos - 1) * squareSize + 'px'
                });
            })

            /*
            ** Déplacement du footer en bas de page
            */

            const lastTile = Math.max(...unavailableTiles)
            $(".footer").css({
                'margin-top': (Math.floor(lastTile/maxWidthSquare) + 1) * squareSize + 'px'
            })
        })
    </script>
</BaseLayout>