---
    import BaseLayout from '../layouts/BaseLayout.astro';
    import BlocPatch from '../components/BlocPatch.astro';

    const pageTitle = "Patchs"
    const patchs = await Astro.glob('../pages/patchs/*.md');
---

<BaseLayout pageTitle={ pageTitle }>
    <h1 class="text-center font-headings font-bold text-4xl lg:text-5xl my-8">{ pageTitle }</h1>

    <!-- <div class="patch-imgs relative sm:grid sm:grid-cols-5">
        {patchs.reverse().map((patch) => <BlocPatch patch={ patch } />)}
    </div> -->

    <div class="patch-imgs-grid hidden md:grid md:grid-cols-3 md:gap-2 lg:hidden">
        <div class="patch-col-0">
            {patchs.reverse().map((patch) => Number.parseInt(patch.url.substr(-1, 1)) % 3 == 0 && <BlocPatch patch={ patch } mediaSize="md" />)}
        </div>
        <div class="patch-col-1">
            {patchs.reverse().map((patch) => Number.parseInt(patch.url.substr(-1, 1)) % 3 == 1 && <BlocPatch patch={ patch } mediaSize="md" />)}
        </div>
        <div class="patch-col-2">
            {patchs.reverse().map((patch) => Number.parseInt(patch.url.substr(-1, 1)) % 3 == 2 && <BlocPatch patch={ patch } mediaSize="md" />)}
        </div>
    </div>
    <div class="patch-imgs-grid-2 sm:grid sm:grid-cols-2 sm:gap-2 md:hidden">
        <div class="patch-col-0">
            {patchs.reverse().map((patch) => Number.parseInt(patch.url.substr(-1, 1)) % 2 == 0 && <BlocPatch patch={ patch } mediaSize="sm" />)}
        </div>
        <div class="patch-col-1">
            {patchs.reverse().map((patch) => Number.parseInt(patch.url.substr(-1, 1)) % 2 == 1 && <BlocPatch patch={ patch } mediaSize="sm" />)}
        </div>
    </div>
    <div class="patch-imgs relative">
        {patchs.map((patch) => <BlocPatch patch={ patch } mediaSize="lg" />)}
    </div>

    <script is:inline
			  src="https://code.jquery.com/jquery-3.7.1.slim.min.js"
			  integrity="sha256-kmHvs0B+OpCW5GVHUNjv9rOmY0IvSIRcf7zGUDTDQM8="
			  crossorigin="anonymous">
    </script>
    <script>
        function roundHalf(num:number):number { return (Math.round(num*2)/2); }

        function isBlocPlaceable(width:number, height:number, index:number, maxWidthTiles:number, unavailableTiles:Array<number>) {
            let isPossible = true;
            let xSize = 0;
            while (xSize <= width && isPossible) {
                let ySize = 0;
                while (ySize < height && isPossible) {
                    isPossible = !unavailableTiles.includes(index + xSize + ySize * maxWidthTiles);
                    ySize++;
                }
                xSize++
            }
            return isPossible;
        }

        function placeBlocInMap(width:number, height:number, index:number, maxWidthTiles:number, unavailableTiles:Array<number>) {
            let xSize = 0;
            while (xSize <= width) {
                let ySize = 0;
                while (ySize < height) {
                    unavailableTiles.push(index + xSize + ySize * maxWidthTiles);
                    ySize++;
                }
                xSize++
            }
            return unavailableTiles;
        }

        function placeBlocsInDOM(dataBlocsPatch:Array<{width:number,height:number,horizontalOffset:number,verticalOffset:number}>, breakpoints:{min:number,max:number}, maxWidthTiles:number) {
            // Pas oublier les marges de 16px de côté
            const squareSize = $( window ).width() > breakpoints.max ? roundHalf(breakpoints.max / maxWidthTiles) : roundHalf(($( window ).width() - 32) / maxWidthTiles);    
            let unavailableTiles = [];
            
            $( ".patch-img-lg" ).each((index, item) => {
                // On récupère le patch comme un objet jQuery
                let patch = $(item);

                let isPossible = false;
                let yPos = 0;
                let xPos = 0;

                // Tester sur chaque case si le patch peut être placée sans être sur une autre
                while (!isPossible) {
                    xPos = 0;
                    while (xPos < maxWidthTiles - dataBlocsPatch[index].width && !isPossible) {
                        isPossible = isBlocPlaceable(dataBlocsPatch[index].width + dataBlocsPatch[index].horizontalOffset, dataBlocsPatch[index].height + dataBlocsPatch[index].verticalOffset, (xPos + yPos * maxWidthTiles), maxWidthTiles, unavailableTiles);
                        xPos++;
                    }
                    yPos++;
                }
                        
                // On ajoute l'offset
                xPos += dataBlocsPatch[index].horizontalOffset;
                yPos += dataBlocsPatch[index].verticalOffset;

                // On colle les patchs à droite s'ils arrivent à moins de 2 cases du bord droit
                xPos = maxWidthTiles - xPos - dataBlocsPatch[index].width < 2 ? maxWidthTiles - dataBlocsPatch[index].width + 1 : xPos;
                
                // Ajout des cases du patch en cours dans la liste des cases déjà prises
                unavailableTiles = placeBlocInMap(dataBlocsPatch[index].width, dataBlocsPatch[index].height, (xPos - 2 + ((yPos - 1) * maxWidthTiles)), maxWidthTiles, unavailableTiles);
                
                if (window.innerWidth >= breakpoints.min) {
                    // On redimensionne et  place le patch
                    patch.css({
                        'top': (yPos - 1) * squareSize + 'px',
                        'left': (xPos - 1) * squareSize + 'px',
                        'width': roundHalf(dataBlocsPatch[index].width * squareSize) + 'px',
                        'height': roundHalf(dataBlocsPatch[index].height * squareSize) + 'px'
                    });
                }
            });

            // On renvoie la taille complète du canvas du début jusqu'à la dernière case occupée
            return Math.floor((Math.max(...unavailableTiles) / maxWidthTiles + 1) * squareSize);
        }

        $(function() {
            /*
            ** Préparation de la grille pour le placement des images
            ** Grille de 24 de large, taille des carrés calculés en fonction de la largeur de la fenêtre ou de la largeur max du contenu (1260px)
            ** Images pouvant avoir des tailles de 3 cases à 10 cases par côté
            ** On les redimensionne en fonction du ratio le plus proche grâce à la liste allSizes
            ** Et en fonction de la taille de base (pas d'agrandissement pour pas perdre en qualité)
            */
            const breakpoints = { min: 1024, max: 1260 };
            const maxWidthTiles = 24;
            const allSizes = [
                { width: 10, height: 9, ratio: 1.1111 },
                { width: 10, height: 8, ratio: 1.25 },
                { width: 10, height: 7, ratio: 1.4286 },
                { width: 10, height: 6, ratio: 1.6667 },
                { width: 10, height: 5, ratio: 2 },
                { width: 10, height: 4, ratio: 2.5 },
                { width: 10, height: 3, ratio: 3.3333 },
                { width: 9, height: 10, ratio: 0.9 },
                { width: 9, height: 8, ratio: 1.125 },
                { width: 9, height: 7, ratio: 1.2857 },
                { width: 9, height: 6, ratio: 1.5 },
                { width: 9, height: 5, ratio: 1.8 },
                { width: 9, height: 4, ratio: 2.25 },
                { width: 9, height: 3, ratio: 3 },
                { width: 8, height: 10, ratio: 0.8 },
                { width: 8, height: 9, ratio: 0.8889 },
                { width: 8, height: 7, ratio: 1.1429 },
                { width: 8, height: 6, ratio: 1.3333 },
                { width: 8, height: 5, ratio: 1.6 },
                { width: 8, height: 4, ratio: 2 },
                { width: 8, height: 3, ratio: 2.6667 },
                { width: 7, height: 10, ratio: 0.7 },
                { width: 7, height: 9, ratio: 0.7778 },
                { width: 7, height: 8, ratio: 0.875 },
                { width: 7, height: 6, ratio: 1.1667 },
                { width: 7, height: 5, ratio: 1.4 },
                { width: 7, height: 4, ratio: 1.75 },
                { width: 7, height: 3, ratio: 2.3333 },
                { width: 6, height: 10, ratio: 0.6 },
                { width: 6, height: 9, ratio: 0.6667 },
                { width: 6, height: 8, ratio: 0.75 },
                { width: 6, height: 7, ratio: 0.8571 },
                { width: 6, height: 5, ratio: 1.2 },
                { width: 6, height: 4, ratio: 1.5 },
                { width: 6, height: 3, ratio: 2 },
                { width: 5, height: 10, ratio: 0.5 },
                { width: 5, height: 9, ratio: 0.5556 },
                { width: 5, height: 8, ratio: 0.625 },
                { width: 5, height: 7, ratio: 0.7143 },
                { width: 5, height: 6, ratio: 0.8333 },
                { width: 5, height: 4, ratio: 1.25 },
                { width: 5, height: 3, ratio: 1.6667 },
                { width: 4, height: 10, ratio: 0.4 },
                { width: 4, height: 9, ratio: 0.4444 },
                { width: 4, height: 8, ratio: 0.5 },
                { width: 4, height: 7, ratio: 0.5714 },
                { width: 4, height: 6, ratio: 0.6667 },
                { width: 4, height: 5, ratio: 0.8 },
                { width: 4, height: 3, ratio: 1.3333 },
                { width: 3, height: 10, ratio: 0.3 },
                { width: 3, height: 9, ratio: 0.3333 },
                { width: 3, height: 8, ratio: 0.375 },
                { width: 3, height: 7, ratio: 0.4286 },
                { width: 3, height: 6, ratio: 0.5 },
                { width: 3, height: 5, ratio: 0.6 },
                { width: 3, height: 4, ratio: 0.75 },
                { width: 3, height: 3, ratio: 1 },
            ];

            // On garde en mémoire les tailles et positions pour gérer le redimensionnement de la fenêtre
            let dataBlocsPatch = [];

            $( ".patch-img-lg" ).each((index, item) => {
                /*
                ** REDIMENSIONNEMENT DES IMAGES
                */

                // On récupère l'image comme un objet jQuery
                let img = $(item);

                // On définit son ratio par rapport à sa vraie taille
                let ratioImg = img.prop("naturalWidth") / img.prop("naturalHeight");

                // On garde les tailles possibles en fonction de la taille de l'image
                let possibleSizes = allSizes.filter((item) => img.prop("naturalWidth") > item.width*roundHalf(breakpoints.max / maxWidthTiles) && img.prop("naturalWidth") > item.height*roundHalf(breakpoints.max / maxWidthTiles));

                // On récupère le ratio le plus proche de celui de l'image de base dans les ratios possibles
                // On en détermine la taille finale de l'image en terme de cases sur la grille
                let minDelta = 2;
                let finalWidth = 0;
                let finalHeight = 0;
                possibleSizes.forEach((item) => {
                    if (Math.abs(item.ratio - ratioImg) < minDelta) {
                        minDelta = Math.abs(item.ratio - ratioImg);
                        finalWidth = item.width;
                        finalHeight = item.height;
                    }
                })

                // 20% de chances que le patch soit décalée vers la droite
                const horizontalOffset = Math.random() < 0.2 ? 1 : 0;
                // 25% de chances que le patch soit décalée vers le bas
                const verticalOffset = Math.random() < 0.25 ? 1 : 0;

                // On remplit le tableau des tailles et positions des différents patchs
                dataBlocsPatch.push({ width: finalWidth, height: finalHeight, horizontalOffset: horizontalOffset, verticalOffset: verticalOffset });
            });

            $( ".patch-imgs" ).addClass('hidden lg:block');

            const canvasHeight = placeBlocsInDOM(dataBlocsPatch, breakpoints, maxWidthTiles);
            
            $( window ).on( 'resize', function() {
                // On replace les patchs dans la page en récupérant la nouvelle hauteur du canvas
                const canvasHeight = placeBlocsInDOM(dataBlocsPatch, breakpoints, maxWidthTiles);

                /*
                ** Déplacement du footer en bas de page
                */

                if (window.innerWidth >= breakpoints.min) {
                    $( ".patch-imgs" ).css({
                        'height': canvasHeight + 'px'
                    })
                } else {
                    $( ".patch-imgs" ).css({
                        'height': 'auto'
                    })
                }
            })

            /*
            ** Déplacement du footer en bas de page
            */

            if (window.innerWidth >= breakpoints.min) {
                $( ".patch-imgs" ).css({
                    'height': canvasHeight + 'px'
                })
            } else {
                $( ".patch-imgs" ).css({
                    'height': 'auto'
                })
            }
        });
    </script>
</BaseLayout>